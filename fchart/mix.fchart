read        (program, division, vs);

begin:      programL := toList(program);
            liveVars := findProjections(program, division);
            startPP  := head(head(programL));
            rest     := list(startPP);
            pending  := list(list(startPP, vs));
            marked   := list();
            residual := list();
            goto   outer;
outer:      if eq(pending, list()) goto cont1 else outBody;
outBody:    current  := head(pending);
            pending  := tail(pending);
            marked   := cons(current, marked);
            targetPP := head(current);
            pp       := startPP;
            lRest    := rest;
            vs       := head(tail(current));
            goto lookupPP;
lookupPP:   if eq(lRest, list()) goto outer else lookupPPB;
lookupPPB:  pp       := head(lRest);
            lRest    := tail(lRest);
            if eq(pp, targetPP) goto process else lookupPP;

process:    bb       := lookup(pp, program);
            code     := initialCode(pp, compressState(pp, vs, liveVars));
            goto inner;
inner:      if eq(bb, list()) goto cont2 else innBody;
innBody:    command  := toList(head(bb));
            bb       := tail(bb);
            fst      := head(command);
            command  := tail(command);

            if eq(fst, ":=") goto hAssign else c;
c:          if eq(fst, "goto") goto hGoto else c0;
c0:         if eq(fst, "if") goto hIf else c1;
c1:         if eq(fst, "return") goto hReturn else error;
error:      return "ERROR";

hAssign:    x        := head(command);
            exp      := head(tail(command));
            if isStatic(x, division) goto hAS else hAD;
hAS:        vs       := append(vs, list(x, eval(exp, vs)));
            goto inner;
hAD:        reduced  := reduce(exp, vs);
            code     := appendCode(code, "{x} := {reduced};");
            goto inner;

hGoto:      bb       := lookup(head(command), program);
            goto inner;

hIf:        exp      := head(command);
            pp0      := head(tail(command));
            pp1      := head(tail(tail(command)));
            if isStatic(exp, division) goto hISA else hIDA;
hISA:       if eval(exp, vs) goto PP0 else PP1;
PP0:        bb       := lookup(pp0, program);
            goto inner;
PP1:        bb       := lookup(pp1, program);
            goto inner;
hIDA:       pending  := append(pending, setdiff(list(pp0, vs), marked));
            pending  := append(pending, setdiff(list(pp1, vs), marked));
            rest     := append(rest, setdiff(pp0, rest));
            rest     := append(rest, setdiff(pp1, rest));
            reduced  := reduce(exp, vs);
            lab0     := lookupLabel(pp0, compressState(pp0, vs, liveVars));
            lab1     := lookupLabel(pp1, compressState(pp1, vs, liveVars));
            code     := appendCode(code, "if {reduced} goto {lab0} else {lab1};");
            goto inner;

hReturn:    exp      := head(command);
            reduced  := reduce(exp, vs);
            code     := appendCode(code, "return {reduced};");
            goto inner;

cont2:      residual := append(residual, setdiff(code, residual));
            goto outer;
cont1:      return residual;
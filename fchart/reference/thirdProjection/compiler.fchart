read (vs);
lab0:	liveVars := map(list("init",set("Q")),list("loop",set("Qtail")),list("cont",set("Qtail")),list("cont1",set("Operator")),list("cont2",set("Operator")),list("cont3",set("Operator")),list("cont4",set("Operator")),list("doRight",set()),list("doLeft",set()),list("doWrite",set("Instruction")),list("doGoto",set("Instruction","Q")),list("doIf",set("Instruction")),list("jump",set("Nextlabel","Q")),list("error",set()),list("stop",set()));
		pending := list(list("init",vs));
		marked := list();
		residual := list();
		current := head(pending);
		pending := tail(pending);
		marked := cons(current,marked);
		targetPP := head(current);
		vs := head(tail(current));
		code := initialCode(targetPP,compressState(targetPP,vs,liveVars));
		if eq("init",targetPP) goto lab1 else lab2;

lab2:	if eq("error",targetPP) goto lab3 else lab4;

lab4:	if eq("error",targetPP) goto lab3 else lab4;

lab3:	reduced := reduce("\"Syntax error: Instruction\"",vs);
		code := appendCode(code,"return {reduced};");
		residual := append(residual,setdiff(code,residual));
		if eq(pending,list()) goto lab5 else lab6;

lab6:	current := head(pending);
		pending := tail(pending);
		marked := cons(current,marked);
		targetPP := head(current);
		vs := head(tail(current));
		code := initialCode(targetPP,compressState(targetPP,vs,liveVars));
		if eq("init",targetPP) goto lab1 else lab2;

lab5:	return residual;

lab1:	vs := append(vs,list("Qtail",eval("Q",vs)));
		reduced := reduce("list()",vs);
		code := appendCode(code,"Left := {reduced};");
		if eval("eq(Qtail,list())",vs) goto lab7 else lab8;

lab8:	vs := append(vs,list("Instruction",eval("head(Qtail)",vs)));
		vs := append(vs,list("Qtail",eval("tail(Qtail)",vs)));
		vs := append(vs,list("Operator",eval("head(Instruction)",vs)));
		if eval("eq(Operator,\"right\")",vs) goto lab9 else lab10;

lab10:	if eval("eq(Operator,\"left\")",vs) goto lab11 else lab12;

lab12:	if eval("eq(Operator,\"write\")",vs) goto lab13 else lab14;

lab14:	if eval("eq(Operator,\"goto\")",vs) goto lab15 else lab16;

lab16:	if eval("eq(Operator,\"if\")",vs) goto lab17 else lab18;

lab18:	reduced := reduce("\"Syntax error: Instruction\"",vs);
		code := appendCode(code,"return {reduced};");
		residual := append(residual,setdiff(code,residual));
		if eq(pending,list()) goto lab5 else lab6;

lab17:	vs := append(vs,list("Symbol",eval("head(tail(Instruction))",vs)));
		vs := append(vs,list("Nextlabel",eval("head(tail(tail(tail(Instruction))))",vs)));
		pending := appendPendingUnique(pending,list("jump",vs),marked,liveVars);
		pending := appendPendingUnique(pending,list("loop",vs),marked,liveVars);
		reduced := reduce("eq(Symbol,firstsym(Right))",vs);
		labT := lookupLabel("jump",compressState("jump",vs,liveVars));
		labF := lookupLabel("loop",compressState("loop",vs,liveVars));
		code := appendCode(code,"if {reduced} goto {labT} else {labF};");
		residual := append(residual,setdiff(code,residual));
		if eq(pending,list()) goto lab5 else lab19;

lab19:	current := head(pending);
		pending := tail(pending);
		marked := cons(current,marked);
		targetPP := head(current);
		vs := head(tail(current));
		code := initialCode(targetPP,compressState(targetPP,vs,liveVars));
		if eq("init",targetPP) goto lab20 else lab21;

lab21:	if eq("loop",targetPP) goto lab22 else lab23;

lab23:	if eq("jump",targetPP) goto lab24 else lab25;

lab25:	if eq("error",targetPP) goto lab26 else lab27;

lab27:	if eq("error",targetPP) goto lab26 else lab27;

lab26:	reduced := reduce("\"Syntax error: Instruction\"",vs);
		code := appendCode(code,"return {reduced};");
		residual := append(residual,setdiff(code,residual));
		if eq(pending,list()) goto lab5 else lab19;

lab24:	vs := append(vs,list("Qtail",eval("newtail(Nextlabel,Q)",vs)));
		if eval("eq(Qtail,list())",vs) goto lab28 else lab29;

lab29:	vs := append(vs,list("Instruction",eval("head(Qtail)",vs)));
		vs := append(vs,list("Qtail",eval("tail(Qtail)",vs)));
		vs := append(vs,list("Operator",eval("head(Instruction)",vs)));
		if eval("eq(Operator,\"right\")",vs) goto lab30 else lab31;

lab31:	if eval("eq(Operator,\"left\")",vs) goto lab32 else lab33;

lab33:	if eval("eq(Operator,\"write\")",vs) goto lab34 else lab35;

lab35:	if eval("eq(Operator,\"goto\")",vs) goto lab36 else lab37;

lab37:	if eval("eq(Operator,\"if\")",vs) goto lab38 else lab39;

lab39:	reduced := reduce("\"Syntax error: Instruction\"",vs);
		code := appendCode(code,"return {reduced};");
		residual := append(residual,setdiff(code,residual));
		if eq(pending,list()) goto lab5 else lab19;

lab38:	vs := append(vs,list("Symbol",eval("head(tail(Instruction))",vs)));
		vs := append(vs,list("Nextlabel",eval("head(tail(tail(tail(Instruction))))",vs)));
		pending := appendPendingUnique(pending,list("jump",vs),marked,liveVars);
		pending := appendPendingUnique(pending,list("loop",vs),marked,liveVars);
		reduced := reduce("eq(Symbol,firstsym(Right))",vs);
		labT := lookupLabel("jump",compressState("jump",vs,liveVars));
		labF := lookupLabel("loop",compressState("loop",vs,liveVars));
		code := appendCode(code,"if {reduced} goto {labT} else {labF};");
		residual := append(residual,setdiff(code,residual));
		if eq(pending,list()) goto lab5 else lab19;

lab36:	vs := append(vs,list("Nextlabel",eval("head(tail(Instruction))",vs)));
		vs := append(vs,list("Qtail",eval("newtail(Nextlabel,Q)",vs)));
		if eval("eq(Qtail,list())",vs) goto lab28 else lab29;

lab34:	vs := append(vs,list("Symbol",eval("head(tail(Instruction))",vs)));
		reduced := reduce("cons(Symbol,tail(Right))",vs);
		code := appendCode(code,"Right := {reduced};");
		if eval("eq(Qtail,list())",vs) goto lab28 else lab29;

lab32:	reduced := reduce("cons(firstsym(Left),Right)",vs);
		code := appendCode(code,"Right := {reduced};");
		reduced := reduce("tail(Left)",vs);
		code := appendCode(code,"Left := {reduced};");
		if eval("eq(Qtail,list())",vs) goto lab28 else lab29;

lab30:	reduced := reduce("cons(firstsym(Right),Left)",vs);
		code := appendCode(code,"Left := {reduced};");
		reduced := reduce("tail(Right)",vs);
		code := appendCode(code,"Right := {reduced};");
		if eval("eq(Qtail,list())",vs) goto lab28 else lab29;

lab28:	reduced := reduce("Right",vs);
		code := appendCode(code,"return {reduced};");
		residual := append(residual,setdiff(code,residual));
		if eq(pending,list()) goto lab5 else lab19;

lab22:	if eval("eq(Qtail,list())",vs) goto lab28 else lab29;

lab20:	vs := append(vs,list("Qtail",eval("Q",vs)));
		reduced := reduce("list()",vs);
		code := appendCode(code,"Left := {reduced};");
		if eval("eq(Qtail,list())",vs) goto lab28 else lab29;

lab15:	vs := append(vs,list("Nextlabel",eval("head(tail(Instruction))",vs)));
		vs := append(vs,list("Qtail",eval("newtail(Nextlabel,Q)",vs)));
		if eval("eq(Qtail,list())",vs) goto lab7 else lab8;

lab13:	vs := append(vs,list("Symbol",eval("head(tail(Instruction))",vs)));
		reduced := reduce("cons(Symbol,tail(Right))",vs);
		code := appendCode(code,"Right := {reduced};");
		if eval("eq(Qtail,list())",vs) goto lab7 else lab8;

lab11:	reduced := reduce("cons(firstsym(Left),Right)",vs);
		code := appendCode(code,"Right := {reduced};");
		reduced := reduce("tail(Left)",vs);
		code := appendCode(code,"Left := {reduced};");
		if eval("eq(Qtail,list())",vs) goto lab7 else lab8;

lab9:	reduced := reduce("cons(firstsym(Right),Left)",vs);
		code := appendCode(code,"Left := {reduced};");
		reduced := reduce("tail(Right)",vs);
		code := appendCode(code,"Right := {reduced};");
		if eval("eq(Qtail,list())",vs) goto lab7 else lab8;

lab7:	reduced := reduce("Right",vs);
		code := appendCode(code,"return {reduced};");
		residual := append(residual,setdiff(code,residual));
		if eq(pending,list()) goto lab5 else lab6;

